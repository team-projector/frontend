image: docker:18
variables:
  DOCKER_DRIVER: overlay
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID
  DOCKER_DEV_IMAGE: $CI_REGISTRY_IMAGE:dev
  DOCKER_CACHE_IMAGE: $CI_REGISTRY_IMAGE:cache
  GIT_STRATEGY: none

stages:
  - build
  - docker
  - publish
  - deploy

build:
  stage: build
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $DOCKER_CACHE_IMAGE || true
    - docker build --cache-from $DOCKER_CACHE_IMAGE --target build -t $DOCKER_CACHE_IMAGE -f deploy/Dockerfile .
    - docker build --cache-from $DOCKER_CACHE_IMAGE -t $DOCKER_IMAGE -f deploy/Dockerfile .
    - docker push $DOCKER_IMAGE
    - docker push $DOCKER_CACHE_IMAGE

publish_dev:
  stage: publish
  dependencies: []
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $DOCKER_IMAGE
    - docker tag $DOCKER_IMAGE $DOCKER_DEV_IMAGE
    - docker push $DOCKER_DEV_IMAGE
  only:
    - master

.deploy:
  image: junte/ssh-agent
  stage: deploy
  dependencies: []
  variables:
    SSH_PRIVATE_KEY: $SSH_DEV_PRIVATE_KEY
  script:
  - ssh deploy@${DEV_HOST} "/opt/deploy/deploy.sh"
  environment:
    name: dev
    url: https://${DEV_HOST}
  only:
  - master

deploy_k8s:
  image: dtzar/helm-kubectl:2.16.1
  stage: deploy
  dependencies: []
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
  before_script:
    - kubectl config set-cluster prod --server="${K8S_URL}" --insecure-skip-tls-verify
    - kubectl config set-credentials deploy --token="$K8S_TOKEN"
    - kubectl config set-context default-context --cluster=prod --user=deploy
    - kubectl config use-context default-context
    - helm init --client-only
    - cd deploy/helm
    - helm repo update
    - export RELEASE_NAME=frontend
    - export DEPLOYS=$(helm ls | grep $RELEASE_NAME | wc -l)
  script:
    - if [ ${DEPLOYS}  -eq 0 ]; then helm install --set image.tag=$CI_PIPELINE_IID --name=${RELEASE_NAME} . ; else helm upgrade  ${RELEASE_NAME} --set image.tag=$CI_PIPELINE_IID .; fi
  environment:
    name: dev
    url: https://${DEV_HOST}
  only:
  - master