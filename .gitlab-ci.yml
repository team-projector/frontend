image: docker:18
variables:
  DOCKER_DRIVER: overlay
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID
  DOCKER_PROD_IMAGE: $CI_REGISTRY_IMAGE:prod
  DOCKER_DEV_IMAGE: $CI_REGISTRY_IMAGE:dev
  GIT_STRATEGY: none

services:
  - docker:dind

stages:
  - build
  - docker
  - publish
  - deploy

.build:
  image: node:8
  stage: build
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
  before_script:
    - npm install
  script:
    - npm run build
  artifacts:
    paths:
    - dist/
  cache:
    paths:
      - node_modules/

.docker:
  stage: docker
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $DOCKER_IMAGE -t $CI_REGISTRY_IMAGE:latest -f deploy/Dockerfile .
    - docker push $DOCKER_IMAGE
    - docker push $CI_REGISTRY_IMAGE:latest

.publish_dev:
  stage: publish
  dependencies: []
  script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  - docker pull $DOCKER_IMAGE
  - docker tag $DOCKER_IMAGE $DOCKER_DEV_IMAGE
  - docker push $DOCKER_DEV_IMAGE
  only:
  - master

.deploy_dev:
  image: junte/ssh-agent
  stage: deploy
  dependencies: []
  variables:
    SSH_PRIVATE_KEY: $SSH_DEV_PRIVATE_KEY
  script:
  - ssh deploy@${DEV_HOST} "/opt/deploy/deploy.sh"
  environment:
    name: dev
    url: https://${DEV_HOST}
  only:
  - master

deploy_k8s:
  image: dtzar/helm-kubectl
  stage: deploy
  dependencies: []
  before_script:
    - mkdir -p /etc/deploy
    - cat $KUBECONFIG
    # - echo ${kube_config} | base64 -d > ${KUBECONFIG}
    # - helm init --client-only
  script:
    - kubectl get all  -n default
    # - export API_VERSION="$(grep "appVersion" Chart.yaml | cut -d" " -f2)"
    # - export RELEASE_NAME="libr-files-v${API_VERSION/./-}"
    # - export DEPLOYS=$(helm ls | grep $RELEASE_NAME | wc -l)
    # - if [ ${DEPLOYS}  -eq 0 ]; then helm install --name=${RELEASE_NAME} . --namespace=${STAGING_NAMESPACE}; else helm upgrade ${RELEASE_NAME} . --namespace=${STAGING_NAMESPACE}; fi
  environment:
    name: dev
    url: https://${DEV_HOST}
  only:
  - master