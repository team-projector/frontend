image: docker:18
variables:
  DOCKER_DRIVER: overlay
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID
  DOCKER_TEST_IMAGE: $CI_REGISTRY_IMAGE:test-$CI_PIPELINE_IID
  DOCKER_MOCKS_IMAGE: $CI_REGISTRY_IMAGE:mocks-$CI_PIPELINE_IID
  DOCKER_DEV_IMAGE: $CI_REGISTRY_IMAGE:dev
  DOCKER_CACHE_IMAGE: $CI_REGISTRY_IMAGE:cache
  GIT_STRATEGY: none

stages:
  - lint_dockerfile
  - build
  - test
  - publish
  - deploy

lint_dockerfile:
  image: hadolint/hadolint:v1.18.0-6-ga0d655d-debian
  variables:
    GIT_DEPTH: 1
    GIT_STRATEGY: fetch
  stage: lint_dockerfile
  script:
    - hadolint deploy/Dockerfile

build:
  stage: build
  except:
    - mocks
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $DOCKER_CACHE_IMAGE || true
    - docker build --cache-from $DOCKER_CACHE_IMAGE --target build -t $DOCKER_CACHE_IMAGE -t $DOCKER_TEST_IMAGE -f deploy/Dockerfile .
    - docker build --cache-from $DOCKER_CACHE_IMAGE -t $DOCKER_IMAGE -f deploy/Dockerfile .
    - docker push $DOCKER_IMAGE
    - docker push $DOCKER_CACHE_IMAGE
    - docker push $DOCKER_TEST_IMAGE

build_mocks:
  stage: build
  only:
    - mocks
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build -t $DOCKER_MOCKS_IMAGE --build-arg BUILD_COMMAND="npm run build:mocks" -f deploy/Dockerfile .
    - docker push $DOCKER_MOCKS_IMAGE

e2e:
  stage: test
  image: $DOCKER_TEST_IMAGE
  except:
    - mocks
  before_script:
    # Add Google Chrome to aptitude's (package manager) sources
    - echo "deb http://dl.google.com/linux/chrome/deb/ stable main" | tee -a /etc/apt/sources.list
    # Fetch Chrome's PGP keys for secure installation
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
    # Update aptitude's package sources
    - apt-get -qq update -y
    # Install latest Chrome stable, Xvfb packages
    - apt-get -qq install -y google-chrome-stable xvfb gtk2-engines-pixbuf xfonts-cyrillic xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable imagemagick x11-apps default-jre
    # Launch Xvfb
    - Xvfb :0 -ac -screen 0 1024x768x24 &
    # Export display for Chrome
    - export DISPLAY=:99
    # Download Selenium server JAR, drivers for Chrome
    - /src/node_modules/.bin/webdriver-manager update
  script:
    - cd /src
    - npm run e2e

publish_master:
  stage: publish
  dependencies: []
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $DOCKER_IMAGE
    - docker tag $DOCKER_IMAGE $DOCKER_DEV_IMAGE
    - docker push $DOCKER_DEV_IMAGE
  only:
    - master

deploy_master:
  image: junte/helm-deploy:1.3-helm2.16.1
  stage: deploy
  dependencies: []
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
    HELM_IMAGE_TAG: $CI_PIPELINE_IID
  script:
    - helm_deploy
  environment:
    name: production
    url: $SITE_ADDRESS
  only:
    - master

deploy_demo:
  image: junte/helm-deploy:1.3-helm2.16.1
  stage: deploy
  dependencies: []
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
    HELM_IMAGE_TAG: $CI_PIPELINE_IID
  script:
    - helm_deploy
  environment:
    name: demo
    url: $DEMO_SITE_ADDRESS
  only:
    - demo

deploy_mocks:
  image: junte/helm-deploy:1.3-helm2.16.1
  stage: deploy
  dependencies: []
  variables:
    GIT_DEPTH: 5
    GIT_STRATEGY: fetch
    HELM_IMAGE_TAG: mocks-$CI_PIPELINE_IID
  script:
    - helm_deploy
  environment:
    name: mocks
    url: $MOCKS_SITE_ADDRESS
  only:
    - mocks